<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ES3~ES7数组方法]]></title>
    <url>https%3A%2F%2Fzyy1104.github.io%2F2019%2F07%2F30%2FES3-ES7%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[ES3~ES7数组方法学习 push() 可以接受一个或者多个参数，将参数追加到数组的尾部，返回添加后的数组的长度，原数组会发生改变。 pop() 从数组尾部删除一个元素，返回这个被删除的元素，原数组发生改变。 unshift() 可以接受一个或者多个参数，将参数放到数组的头部，返回添加后的数组的长度，原数组会发生改变。 shift() 从数组头部删除一个元素，返回这个被删除的元素，原数组发生改变。 slice() 截取类 如果不传参数，会返回原数组；如果一个参数，从该参数表示的索引开始截取，直至数组结束，返回这个截取数组，原数组不变；两个参数，从第一个参数对应的索引开始截取，到第二个参数对应的索引结束，但不包括第二个参数对应的索引上值，原数组不改变；最多接受两个参数。 splice() 截取类 没有参数，返回空数组，原数组不变；一个参数，从该参数表示的索引位开始截取，直至数组结束，返回截取的 数组，原数组改变；两个参数，第一个参数表示开始截取的索引位，第二个参数表示截取的长度，返回截取的 数组，原数组改变；三个或者更多参数，第三个及以后的参数表示要从截取位插入的值。 reverse() 不接受参数，数组翻转。 sort() 排序。1234arr.sort(function(a,b)&#123; return a-b; //从小到大排序 return b-a; //从大到小排序 &#125;); join() 参数来拼接；分隔符。 concat() 将参数放入原数组后返回，原数组本身不变，如果参数是数组，将值提出来。 isArray() 判断是否是数组。 toString() 数组转字符串。 ES5新增的数组方法2个索引方法：indexOf() 和 lastIndexOf()； indexOf() 从前往后遍历，返回item在数组中的索引位，如果没有返回-1；通常用来判断数组中有没有某个元素。可以接收两个参数，第一个参数是要查找的项，第二个参数是查找起点位置的索引。 lastIndexOf() 与indexOf一样，区别是从后往前找。 5个迭代方法：forEach()、map()、filter()、some()、every()； forEach() forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法；forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。 map() 将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回；map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。 filter() 用于过滤数组成员，满足条件的成员组成一个新数组返回；它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组；可以接受三个参数：当前成员，当前位置和整个数组。 some() 该方法对数组中的每一项运行给定函数，如果该函数对任何一项返回 true，则返回true。（some方法会在数组中任一项执行函数返回true之后，不在进行循环。） every() 该方法对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回true。 2个归并方法：reduce()、reduceRight()； reduce() 依次处理数组的每个成员，最终累计为一个值。reduce是从左到右处理（从第一个成员到最后一个成员）。参数是一个函数,该函数接受以下两个参数：1累积变量，默认为数组的第一个成员；2当前变量，默认为数组的第二个成员。 reduceRight()从右往左。 ES6新增的数组方法 Array.from() 用于类似数组的对象（即有length属性的对象）和可遍历对象转为真正的数组。12345678let json =&#123; '0':'hello', '1':'123', '2':'panda', length:3 &#125; let arr = Array.from(json); console.log(arr);//打印：["hello", "123", "panda"] Array.of() 将一组值转变为数组。1let arr1 = Array.of('你好','hello'); console.log(arr1);//["你好", "hello"] find()和findIndex() 用于找出第一个符合条件的数组成员。参数是个回调函数，所有数组成员依次执行该回调函数，直到找到第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，就返回undefined；可以接收3个参数，依次为当前值、当前位置、原数组。 fill() 使用fill（）方法给定值填充数组。如：new Array(3).fill(7);//[7,7,7]可以接收第二个和第三个参数，用于指定填充的起始位置和结束位置（不包括结束位置）。123let arr3 = [0,1,2,3,4,5,6,7]; arr3.fill('error',2,3); console.log(arr3);//[0,1,"error",3,4,5,6,7] 遍历数组的方法：entries()、values()、keys() 这三个方法都是返回一个遍历器对象，可用for…of循环遍历，唯一区别：keys()是对键名的遍历、values()对键值的遍历、entries()是对键值对的遍历。12345678910111213141516for(let item of ['a','b'].keys())&#123; consloe.log(item); //0 //1&#125;for(let item of ['a','b'].values())&#123; consloe.log(item); //'a' //'b'&#125;let arr4 = [0,1];for(let item of arr4.entries())&#123; console.log(item); // [0, 0] // [1, 1]&#125; 如果不用for…of进行遍历，可用使用next()方法手动跳到下一个值。12345678910let arr5 =['a','b','c']let entries = arr5.entries();console.log(entries.next().value);//[0, "a"]console.log(entries.next().value);//[1, "b"]console.log(entries.next().value);//[2, "c"]console.log(entries.next().value);//undefined copyWithin() 在数组内部，将指定位置的成员复制到其他位置(会覆盖原有成员)，改变原数组。 该函数有三个参数。target：目的起始位置。start：复制源的起始位置(从0开始)，可以省略，可以是负数。end：复制源的结束位置，可以省略，可以是负数，实际结束位置是end-1。12345678const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];arr1.copyWithin(1, 3, 6);//把第3个元素（从0开始）到第5个元素，复制并覆盖到以第1个位置开始的地方。console.log('%s', JSON.stringify(arr1))//[1,4,5,6,5,6,7,8,9,10,11] start和end都是可以省略。start省略表示从0开始，end省略表示数组的长度值。目标的位置不够的，能覆盖多少就覆盖多少。1234const arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]arr2.copyWithin(3)console.log('%s', JSON.stringify(arr2))//[1,2,3,1,2,3,4,5,6,7,8] start和end都可以是负数，负数表示从右边数过来第几个（从-1开始）。start小于end，两者为负数时也是。123const arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]arr3.copyWithin(3, -3, -2)console.log('%s', JSON.stringify(arr3)) end永远大于end（取值必须是start右边的），end小于start（取start左边的值）时会返回原数组。 ES7新增的数组方法 incledes() 表示某个数组是否包含给定的值，如果包含则返回 true，否则返回false。可以接收两个参数：要搜索的值和搜索的开始索引。当第二个参数被传入时，该方法会从索引处开始往后搜索（默认索引值为0）。若搜索值在数组中存在则返回true，否则返回false。123456['a', 'b', 'c', 'd'].includes('b') // true['a', 'b', 'c', 'd'].includes('b', 1) // true['a', 'b', 'c', 'd'].includes('b', 2) // false tips：includes与indexOf的区别是：前者返回布尔值（利于if条件判断），后者返回数值。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试文章]]></title>
    <url>https%3A%2F%2Fzyy1104.github.io%2F2019%2F07%2F03%2F%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A01%2F</url>
    <content type="text"><![CDATA[noSql 翻译过来 not only sql 不仅仅是sql 他就是一个非关系型数据库它的特点:高性能、易部署、易使用，存储数据非常方便。 优点 1/面向文档储存的数据库（BSON格式存储）2/具有丰富的查询指令3/支持索引4/具有分片系统5/无模式 缺点 1/占用空间非常大2/不支持事务3/目前已经不维护32位的系统的了 mongo的基础指令 show dbs 获取你当前所有的数据库use dataBase_name 创建数据库(没有－创建／存在－使用)db 指查询你当前的数据库db.stats() 查询你当前数据库的状态db.dropDatabase() 删除你当前的数据库db.help() 查询帮助db.version() 获取你当前数据库的版本db.database_name.help() 查询任意数据库的帮助db.collection_name.find() 查询你当前集合内的信息]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>mongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
